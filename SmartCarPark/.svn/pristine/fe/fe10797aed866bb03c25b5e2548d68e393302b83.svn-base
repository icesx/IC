/*
 * Sim900.c
 *
 *  Created on: 2015年8月6日
 *      Author: i
 */
#include "Sim900a.h"

#include <Arduino.h>
#include <HardwareSerial.h>

void Sim900a::prepare() {
	char* const defaultOk = "OK";
	Serial.println("init sim900a...");
	sendATcommandTimeout("AT", defaultOk, 5000, true);
	delay(2000);
	sendATcommandTimeout("AT+CIPSHUT", defaultOk, 15000, true);
	delay(2000);
	sendATcommandTimeout("AT+CIPMUX=0", defaultOk, 15000, true);
	delay(2000);
	sendATcommandTimeout("AT+CGATT=1", defaultOk, 15000, true);
	delay(3000);
	sendATcommandTimeout("AT+CSTT=\"www.scp\",\"\",\"\"", defaultOk, 15000,
	true);
	delay(2000);
	sendATcommandTimeout("AT+CIPSPRT=1", defaultOk, 15000, true);
	delay(2000);
	sendATcommandTimeout("AT+CIICR", defaultOk, 15000, true);
	delay(2000);
	sendATcommandTimeout("AT+CIFSR", ".", 15000, true);
	Serial.println("network inited!");
}
char* Sim900a::readFromMySerial() {
	memset(response, 0, 100);
	uint8_t x = 0;
	while (this->param->mySerial->available() != 0) {
		response[x] = this->param->mySerial->read();
		delay(2);
		x++;
	};
	return response;
}
void Sim900a::runCommand(char* ATcommand) {
	this->param->mySerial->println(ATcommand);
	Serial.print("try:");
	Serial.print(ATcommand);
	Serial.print("\r\n");
}
void Sim900a::sendATcommandTimeout(char* ATcommand, char* okFlag,
		unsigned int timeout, boolean retry) {
	runCommand(ATcommand);
	boolean isOk = readFromMySerial(timeout, okFlag);
	Serial.print("\r\n");
	if (isOk) {
		return;
	} else {
		if (retry == true) {
			delay(2000);
			Serial.print("retrytimeout:");
			Serial.println(ATcommand);
			sendATcommandTimeout(ATcommand, okFlag, timeout, retry);
		}
	}
	Serial.print("\r\n");
}
void Sim900a::reconnect() {
	sendATcommandTimeout("AT+CIPSTART=\"TCP\",\"42.96.142.145\",\"80\"",
			"CONNECT OK", 15000, true);
}
void Sim900a::close_connect() {
	sendATcommandTimeout("AT+CIPCLOSE", "CLOSE OK", 15000, false);
}
void Sim900a::sendCode(char*code) {
	this->param->mySerial->println(HTTP_METHOD);
	this->param->mySerial->println(code);
	this->param->mySerial->println(SEND_FLAG);
}
char* Sim900a::transform(char *code) {
	reconnect();
	sendATcommandTimeout("AT+CIPSEND", ">", 15000, false);
	sendCode(code);
	readFromMySerial(15000, "scp");
	Serial.print("\r\n");
	close_connect();
	return response;
}
char* Sim900a::readFromMySerial(int timeout, char* okFlag) {
	memset(response, 0, 100);
	uint8_t x = 0;
	boolean isOk = false;
	previous = millis();
	do {
		if (this->param->mySerial->available() != 0) {
			response[x] = this->param->mySerial->read();
			Serial.print(response[x]);
			delay(2);
			x++;
		}
		if (strstr(response, okFlag) != NULL) {
			isOk = true;
			break;
		}
	} while ((millis() - previous) < timeout);
	return response;
}

